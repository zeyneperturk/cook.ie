{"ast":null,"code":"import { addDays } from \"./addDays.js\";\nimport { addMonths } from \"./addMonths.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link add} function options.\r\n */\n\n/**\r\n * @name add\r\n * @category Common Helpers\r\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\r\n *\r\n * @description\r\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the seconds added\r\n *\r\n * @example\r\n * // Add the following duration to 1 September 2014, 10:19:50\r\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\r\n *   years: 2,\r\n *   months: 9,\r\n *   weeks: 1,\r\n *   days: 7,\r\n *   hours: 5,\r\n *   minutes: 9,\r\n *   seconds: 30,\r\n * })\r\n * //=> Thu Jun 15 2017 15:29:20\r\n */\nexport function add(date, duration, options) {\n  const {\n    years = 0,\n    months = 0,\n    weeks = 0,\n    days = 0,\n    hours = 0,\n    minutes = 0,\n    seconds = 0\n  } = duration;\n\n  // Add years and months\n  const _date = toDate(date, options?.in);\n  const dateWithMonths = months || years ? addMonths(_date, months + years * 12) : _date;\n\n  // Add weeks and days\n  const dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes, and seconds\n  const minutesToAdd = minutes + hours * 60;\n  const secondsToAdd = seconds + minutesToAdd * 60;\n  const msToAdd = secondsToAdd * 1000;\n  return constructFrom(options?.in || date, +dateWithDays + msToAdd);\n}\n\n// Fallback for modularized imports:\nexport default add;","map":{"version":3,"names":["addDays","addMonths","constructFrom","toDate","add","date","duration","options","years","months","weeks","days","hours","minutes","seconds","_date","in","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/add.js"],"sourcesContent":["import { addDays } from \"./addDays.js\";\r\nimport { addMonths } from \"./addMonths.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link add} function options.\r\n */\r\n\r\n/**\r\n * @name add\r\n * @category Common Helpers\r\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\r\n *\r\n * @description\r\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the seconds added\r\n *\r\n * @example\r\n * // Add the following duration to 1 September 2014, 10:19:50\r\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\r\n *   years: 2,\r\n *   months: 9,\r\n *   weeks: 1,\r\n *   days: 7,\r\n *   hours: 5,\r\n *   minutes: 9,\r\n *   seconds: 30,\r\n * })\r\n * //=> Thu Jun 15 2017 15:29:20\r\n */\r\nexport function add(date, duration, options) {\r\n  const {\r\n    years = 0,\r\n    months = 0,\r\n    weeks = 0,\r\n    days = 0,\r\n    hours = 0,\r\n    minutes = 0,\r\n    seconds = 0,\r\n  } = duration;\r\n\r\n  // Add years and months\r\n  const _date = toDate(date, options?.in);\r\n  const dateWithMonths =\r\n    months || years ? addMonths(_date, months + years * 12) : _date;\r\n\r\n  // Add weeks and days\r\n  const dateWithDays =\r\n    days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\r\n\r\n  // Add days, hours, minutes, and seconds\r\n  const minutesToAdd = minutes + hours * 60;\r\n  const secondsToAdd = seconds + minutesToAdd * 60;\r\n  const msToAdd = secondsToAdd * 1000;\r\n\r\n  return constructFrom(options?.in || date, +dateWithDays + msToAdd);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default add;\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC3C,MAAM;IACJC,KAAK,GAAG,CAAC;IACTC,MAAM,GAAG,CAAC;IACVC,KAAK,GAAG,CAAC;IACTC,IAAI,GAAG,CAAC;IACRC,KAAK,GAAG,CAAC;IACTC,OAAO,GAAG,CAAC;IACXC,OAAO,GAAG;EACZ,CAAC,GAAGR,QAAQ;;EAEZ;EACA,MAAMS,KAAK,GAAGZ,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAES,EAAE,CAAC;EACvC,MAAMC,cAAc,GAClBR,MAAM,IAAID,KAAK,GAAGP,SAAS,CAACc,KAAK,EAAEN,MAAM,GAAGD,KAAK,GAAG,EAAE,CAAC,GAAGO,KAAK;;EAEjE;EACA,MAAMG,YAAY,GAChBP,IAAI,IAAID,KAAK,GAAGV,OAAO,CAACiB,cAAc,EAAEN,IAAI,GAAGD,KAAK,GAAG,CAAC,CAAC,GAAGO,cAAc;;EAE5E;EACA,MAAME,YAAY,GAAGN,OAAO,GAAGD,KAAK,GAAG,EAAE;EACzC,MAAMQ,YAAY,GAAGN,OAAO,GAAGK,YAAY,GAAG,EAAE;EAChD,MAAME,OAAO,GAAGD,YAAY,GAAG,IAAI;EAEnC,OAAOlB,aAAa,CAACK,OAAO,EAAES,EAAE,IAAIX,IAAI,EAAE,CAACa,YAAY,GAAGG,OAAO,CAAC;AACpE;;AAEA;AACA,eAAejB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}