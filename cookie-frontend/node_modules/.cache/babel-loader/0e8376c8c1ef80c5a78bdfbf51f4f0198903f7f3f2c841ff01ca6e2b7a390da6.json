{"ast":null,"code":"import { addBusinessDays } from \"./addBusinessDays.js\";\n\n/**\r\n * The {@link subBusinessDays} function options.\r\n */\n\n/**\r\n * @name subBusinessDays\r\n * @category Day Helpers\r\n * @summary Subtract the specified number of business days (mon - fri) from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of business days (mon - fri) from the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the business days subtracted\r\n *\r\n * @example\r\n * // Subtract 10 business days from 1 September 2014:\r\n * const result = subBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)\r\n */\nexport function subBusinessDays(date, amount, options) {\n  return addBusinessDays(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subBusinessDays;","map":{"version":3,"names":["addBusinessDays","subBusinessDays","date","amount","options"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/subBusinessDays.js"],"sourcesContent":["import { addBusinessDays } from \"./addBusinessDays.js\";\r\n\r\n/**\r\n * The {@link subBusinessDays} function options.\r\n */\r\n\r\n/**\r\n * @name subBusinessDays\r\n * @category Day Helpers\r\n * @summary Subtract the specified number of business days (mon - fri) from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of business days (mon - fri) from the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the business days subtracted\r\n *\r\n * @example\r\n * // Subtract 10 business days from 1 September 2014:\r\n * const result = subBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)\r\n */\r\nexport function subBusinessDays(date, amount, options) {\r\n  return addBusinessDays(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subBusinessDays;\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,sBAAsB;;AAEtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACrD,OAAOJ,eAAe,CAACE,IAAI,EAAE,CAACC,MAAM,EAAEC,OAAO,CAAC;AAChD;;AAEA;AACA,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}