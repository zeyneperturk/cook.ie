{"ast":null,"code":"import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\r\n * The {@link differenceInCalendarDays} function options.\r\n */\n\n/**\r\n * @name differenceInCalendarDays\r\n * @category Day Helpers\r\n * @summary Get the number of calendar days between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar days between the given dates. This means that the times are removed\r\n * from the dates and then the difference in days is calculated.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - The options object\r\n *\r\n * @returns The number of calendar days\r\n *\r\n * @example\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 366\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 1\r\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n  const laterTimestamp = +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp = +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;","map":{"version":3,"names":["getTimezoneOffsetInMilliseconds","normalizeDates","millisecondsInDay","startOfDay","differenceInCalendarDays","laterDate","earlierDate","options","laterDate_","earlierDate_","in","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","Math","round"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/differenceInCalendarDays.js"],"sourcesContent":["import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { millisecondsInDay } from \"./constants.js\";\r\nimport { startOfDay } from \"./startOfDay.js\";\r\n\r\n/**\r\n * The {@link differenceInCalendarDays} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarDays\r\n * @category Day Helpers\r\n * @summary Get the number of calendar days between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar days between the given dates. This means that the times are removed\r\n * from the dates and then the difference in days is calculated.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - The options object\r\n *\r\n * @returns The number of calendar days\r\n *\r\n * @example\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 366\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 1\r\n */\r\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const laterStartOfDay = startOfDay(laterDate_);\r\n  const earlierStartOfDay = startOfDay(earlierDate_);\r\n\r\n  const laterTimestamp =\r\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\r\n  const earlierTimestamp =\r\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\r\n\r\n  // Round the number of days to the nearest integer because the number of\r\n  // milliseconds in a day is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarDays;\r\n"],"mappings":"AAAA,SAASA,+BAA+B,QAAQ,2CAA2C;AAC3F,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,UAAU,QAAQ,iBAAiB;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE;EACxE,MAAM,CAACC,UAAU,EAAEC,YAAY,CAAC,GAAGR,cAAc,CAC/CM,OAAO,EAAEG,EAAE,EACXL,SAAS,EACTC,WACF,CAAC;EAED,MAAMK,eAAe,GAAGR,UAAU,CAACK,UAAU,CAAC;EAC9C,MAAMI,iBAAiB,GAAGT,UAAU,CAACM,YAAY,CAAC;EAElD,MAAMI,cAAc,GAClB,CAACF,eAAe,GAAGX,+BAA+B,CAACW,eAAe,CAAC;EACrE,MAAMG,gBAAgB,GACpB,CAACF,iBAAiB,GAAGZ,+BAA+B,CAACY,iBAAiB,CAAC;;EAEzE;EACA;EACA;EACA,OAAOG,IAAI,CAACC,KAAK,CAAC,CAACH,cAAc,GAAGC,gBAAgB,IAAIZ,iBAAiB,CAAC;AAC5E;;AAEA;AACA,eAAeE,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}