{"ast":null,"code":"import { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link setSeconds} function options.\r\n */\n\n/**\r\n * @name setSeconds\r\n * @category Second Helpers\r\n * @summary Set the seconds to the given date, with context support.\r\n *\r\n * @description\r\n * Set the seconds to the given date, with an optional context for time zone specification.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param seconds - The seconds of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the seconds set\r\n *\r\n * @example\r\n * // Set 45 seconds to 1 September 2014 11:30:40:\r\n * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\r\n * //=> Mon Sep 01 2014 11:30:45\r\n */\nexport function setSeconds(date, seconds, options) {\n  const _date = toDate(date, options?.in);\n  _date.setSeconds(seconds);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setSeconds;","map":{"version":3,"names":["toDate","setSeconds","date","seconds","options","_date","in"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/setSeconds.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setSeconds} function options.\r\n */\r\n\r\n/**\r\n * @name setSeconds\r\n * @category Second Helpers\r\n * @summary Set the seconds to the given date, with context support.\r\n *\r\n * @description\r\n * Set the seconds to the given date, with an optional context for time zone specification.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param seconds - The seconds of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the seconds set\r\n *\r\n * @example\r\n * // Set 45 seconds to 1 September 2014 11:30:40:\r\n * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\r\n * //=> Mon Sep 01 2014 11:30:45\r\n */\r\nexport function setSeconds(date, seconds, options) {\r\n  const _date = toDate(date, options?.in);\r\n  _date.setSeconds(seconds);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setSeconds;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACjD,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;EACvCD,KAAK,CAACJ,UAAU,CAACE,OAAO,CAAC;EACzB,OAAOE,KAAK;AACd;;AAEA;AACA,eAAeJ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}