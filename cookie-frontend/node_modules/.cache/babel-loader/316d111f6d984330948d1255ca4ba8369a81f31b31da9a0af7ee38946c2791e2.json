{"ast":null,"code":"import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { constructFrom } from \"./constructFrom.js\";\n\n/**\r\n * The {@link eachHourOfInterval} function options.\r\n */\n\n/**\r\n * The {@link eachHourOfInterval} function result type.\r\n * Resolves to the appropriate date type based on inputs.\r\n */\n\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\r\n * const result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * });\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\nexport function eachHourOfInterval(interval, options) {\n  const {\n    start,\n    end\n  } = normalizeInterval(options?.in, interval);\n  let reversed = +start > +end;\n  const endTime = reversed ? +start : +end;\n  const date = reversed ? end : start;\n  date.setMinutes(0, 0, 0);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+date <= endTime) {\n    dates.push(constructFrom(start, date));\n    date.setHours(date.getHours() + step);\n  }\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachHourOfInterval;","map":{"version":3,"names":["normalizeInterval","constructFrom","eachHourOfInterval","interval","options","start","end","in","reversed","endTime","date","setMinutes","step","dates","push","setHours","getHours","reverse"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/eachHourOfInterval.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link eachHourOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachHourOfInterval} function result type.\r\n * Resolves to the appropriate date type based on inputs.\r\n */\r\n\r\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\r\n * const result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * });\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\r\nexport function eachHourOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const endTime = reversed ? +start : +end;\r\n  const date = reversed ? end : start;\r\n  date.setMinutes(0, 0, 0);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+date <= endTime) {\r\n    dates.push(constructFrom(start, date));\r\n    date.setHours(date.getHours() + step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachHourOfInterval;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,aAAa,QAAQ,oBAAoB;;AAElD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACpD,MAAM;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGN,iBAAiB,CAACI,OAAO,EAAEG,EAAE,EAAEJ,QAAQ,CAAC;EAE/D,IAAIK,QAAQ,GAAG,CAACH,KAAK,GAAG,CAACC,GAAG;EAC5B,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACH,KAAK,GAAG,CAACC,GAAG;EACxC,MAAMI,IAAI,GAAGF,QAAQ,GAAGF,GAAG,GAAGD,KAAK;EACnCK,IAAI,CAACC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAExB,IAAIC,IAAI,GAAGR,OAAO,EAAEQ,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZJ,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMK,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACH,IAAI,IAAID,OAAO,EAAE;IACvBI,KAAK,CAACC,IAAI,CAACb,aAAa,CAACI,KAAK,EAAEK,IAAI,CAAC,CAAC;IACtCA,IAAI,CAACK,QAAQ,CAACL,IAAI,CAACM,QAAQ,CAAC,CAAC,GAAGJ,IAAI,CAAC;EACvC;EAEA,OAAOJ,QAAQ,GAAGK,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGJ,KAAK;AAC3C;;AAEA;AACA,eAAeX,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}