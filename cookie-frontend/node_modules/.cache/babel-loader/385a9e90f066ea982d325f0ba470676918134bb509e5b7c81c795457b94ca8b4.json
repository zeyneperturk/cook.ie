{"ast":null,"code":"import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { max } from \"./max.js\";\nimport { min } from \"./min.js\";\n\n/**\r\n * The {@link clamp} function options.\r\n */\n\n/**\r\n * The {@link clamp} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\n\n/**\r\n * @name clamp\r\n * @category Interval Helpers\r\n * @summary Return a date bounded by the start and the end of the given interval.\r\n *\r\n * @description\r\n * Clamps a date to the lower bound with the start of the interval and the upper\r\n * bound with the end of the interval.\r\n *\r\n * - When the date is less than the start of the interval, the start is returned.\r\n * - When the date is greater than the end of the interval, the end is returned.\r\n * - Otherwise the date is returned.\r\n *\r\n * @typeParam DateType - Date argument type.\r\n * @typeParam IntervalType - Interval argument type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param date - The date to be bounded\r\n * @param interval - The interval to bound to\r\n * @param options - An object with options\r\n *\r\n * @returns The date bounded by the start and the end of the interval\r\n *\r\n * @example\r\n * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021\r\n * const result = clamp(new Date(2021, 2, 21), {\r\n *   start: new Date(2021, 2, 22),\r\n *   end: new Date(2021, 3, 1),\r\n * })\r\n * //=> Mon Mar 22 2021 00:00:00\r\n */\nexport function clamp(date, interval, options) {\n  const [date_, start, end] = normalizeDates(options?.in, date, interval.start, interval.end);\n  return min([max([date_, start], options), end], options);\n}\n\n// Fallback for modularized imports:\nexport default clamp;","map":{"version":3,"names":["normalizeDates","max","min","clamp","date","interval","options","date_","start","end","in"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/clamp.js"],"sourcesContent":["import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { max } from \"./max.js\";\r\nimport { min } from \"./min.js\";\r\n\r\n/**\r\n * The {@link clamp} function options.\r\n */\r\n\r\n/**\r\n * The {@link clamp} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name clamp\r\n * @category Interval Helpers\r\n * @summary Return a date bounded by the start and the end of the given interval.\r\n *\r\n * @description\r\n * Clamps a date to the lower bound with the start of the interval and the upper\r\n * bound with the end of the interval.\r\n *\r\n * - When the date is less than the start of the interval, the start is returned.\r\n * - When the date is greater than the end of the interval, the end is returned.\r\n * - Otherwise the date is returned.\r\n *\r\n * @typeParam DateType - Date argument type.\r\n * @typeParam IntervalType - Interval argument type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param date - The date to be bounded\r\n * @param interval - The interval to bound to\r\n * @param options - An object with options\r\n *\r\n * @returns The date bounded by the start and the end of the interval\r\n *\r\n * @example\r\n * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021\r\n * const result = clamp(new Date(2021, 2, 21), {\r\n *   start: new Date(2021, 2, 22),\r\n *   end: new Date(2021, 3, 1),\r\n * })\r\n * //=> Mon Mar 22 2021 00:00:00\r\n */\r\nexport function clamp(date, interval, options) {\r\n  const [date_, start, end] = normalizeDates(\r\n    options?.in,\r\n    date,\r\n    interval.start,\r\n    interval.end,\r\n  );\r\n\r\n  return min([max([date_, start], options), end], options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default clamp;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,GAAG,QAAQ,UAAU;AAC9B,SAASC,GAAG,QAAQ,UAAU;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC7C,MAAM,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGT,cAAc,CACxCM,OAAO,EAAEI,EAAE,EACXN,IAAI,EACJC,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACI,GACX,CAAC;EAED,OAAOP,GAAG,CAAC,CAACD,GAAG,CAAC,CAACM,KAAK,EAAEC,KAAK,CAAC,EAAEF,OAAO,CAAC,EAAEG,GAAG,CAAC,EAAEH,OAAO,CAAC;AAC1D;;AAEA;AACA,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}