{"ast":null,"code":"import { setMonth } from \"./setMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link setQuarter} function options.\r\n */\n\n/**\r\n * @name setQuarter\r\n * @category Quarter Helpers\r\n * @summary Set the year quarter to the given date.\r\n *\r\n * @description\r\n * Set the year quarter to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param quarter - The quarter of the new date\r\n * @param options - The options\r\n *\r\n * @returns The new date with the quarter set\r\n *\r\n * @example\r\n * // Set the 2nd quarter to 2 July 2014:\r\n * const result = setQuarter(new Date(2014, 6, 2), 2)\r\n * //=> Wed Apr 02 2014 00:00:00\r\n */\nexport function setQuarter(date, quarter, options) {\n  const date_ = toDate(date, options?.in);\n  const oldQuarter = Math.trunc(date_.getMonth() / 3) + 1;\n  const diff = quarter - oldQuarter;\n  return setMonth(date_, date_.getMonth() + diff * 3);\n}\n\n// Fallback for modularized imports:\nexport default setQuarter;","map":{"version":3,"names":["setMonth","toDate","setQuarter","date","quarter","options","date_","in","oldQuarter","Math","trunc","getMonth","diff"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/setQuarter.js"],"sourcesContent":["import { setMonth } from \"./setMonth.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name setQuarter\r\n * @category Quarter Helpers\r\n * @summary Set the year quarter to the given date.\r\n *\r\n * @description\r\n * Set the year quarter to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param quarter - The quarter of the new date\r\n * @param options - The options\r\n *\r\n * @returns The new date with the quarter set\r\n *\r\n * @example\r\n * // Set the 2nd quarter to 2 July 2014:\r\n * const result = setQuarter(new Date(2014, 6, 2), 2)\r\n * //=> Wed Apr 02 2014 00:00:00\r\n */\r\nexport function setQuarter(date, quarter, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  const oldQuarter = Math.trunc(date_.getMonth() / 3) + 1;\r\n  const diff = quarter - oldQuarter;\r\n  return setMonth(date_, date_.getMonth() + diff * 3);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setQuarter;\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACjD,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;EACvC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EACvD,MAAMC,IAAI,GAAGR,OAAO,GAAGI,UAAU;EACjC,OAAOR,QAAQ,CAACM,KAAK,EAAEA,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAGC,IAAI,GAAG,CAAC,CAAC;AACrD;;AAEA;AACA,eAAeV,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}