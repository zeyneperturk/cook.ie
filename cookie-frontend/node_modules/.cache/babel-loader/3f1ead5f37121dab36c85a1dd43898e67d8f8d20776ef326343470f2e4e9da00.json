{"ast":null,"code":"import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { eachDayOfInterval } from \"./eachDayOfInterval.js\";\nimport { isWeekend } from \"./isWeekend.js\";\n\n/**\r\n * The {@link eachWeekendOfInterval} function options.\r\n */\n\n/**\r\n * The {@link eachWeekendOfInterval} function result type.\r\n */\n\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The given interval\r\n * @param options - An object with options\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\nexport function eachWeekendOfInterval(interval, options) {\n  const {\n    start,\n    end\n  } = normalizeInterval(options?.in, interval);\n  const dateInterval = eachDayOfInterval({\n    start,\n    end\n  }, options);\n  const weekends = [];\n  let index = 0;\n  while (index < dateInterval.length) {\n    const date = dateInterval[index++];\n    if (isWeekend(date)) weekends.push(constructFrom(start, date));\n  }\n  return weekends;\n}\n\n// Fallback for modularized imports:\nexport default eachWeekendOfInterval;","map":{"version":3,"names":["normalizeInterval","constructFrom","eachDayOfInterval","isWeekend","eachWeekendOfInterval","interval","options","start","end","in","dateInterval","weekends","index","length","date","push"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/eachWeekendOfInterval.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { eachDayOfInterval } from \"./eachDayOfInterval.js\";\r\nimport { isWeekend } from \"./isWeekend.js\";\r\n\r\n/**\r\n * The {@link eachWeekendOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachWeekendOfInterval} function result type.\r\n */\r\n\r\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The given interval\r\n * @param options - An object with options\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\r\nexport function eachWeekendOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n  const dateInterval = eachDayOfInterval({ start, end }, options);\r\n  const weekends = [];\r\n  let index = 0;\r\n  while (index < dateInterval.length) {\r\n    const date = dateInterval[index++];\r\n    if (isWeekend(date)) weekends.push(constructFrom(start, date));\r\n  }\r\n  return weekends;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekendOfInterval;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,SAAS,QAAQ,gBAAgB;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACvD,MAAM;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGR,iBAAiB,CAACM,OAAO,EAAEG,EAAE,EAAEJ,QAAQ,CAAC;EAC/D,MAAMK,YAAY,GAAGR,iBAAiB,CAAC;IAAEK,KAAK;IAAEC;EAAI,CAAC,EAAEF,OAAO,CAAC;EAC/D,MAAMK,QAAQ,GAAG,EAAE;EACnB,IAAIC,KAAK,GAAG,CAAC;EACb,OAAOA,KAAK,GAAGF,YAAY,CAACG,MAAM,EAAE;IAClC,MAAMC,IAAI,GAAGJ,YAAY,CAACE,KAAK,EAAE,CAAC;IAClC,IAAIT,SAAS,CAACW,IAAI,CAAC,EAAEH,QAAQ,CAACI,IAAI,CAACd,aAAa,CAACM,KAAK,EAAEO,IAAI,CAAC,CAAC;EAChE;EACA,OAAOH,QAAQ;AACjB;;AAEA;AACA,eAAeP,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}