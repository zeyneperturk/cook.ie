{"ast":null,"code":"import { startOfSecond } from \"./startOfSecond.js\";\n\n/**\r\n * @name isSameSecond\r\n * @category Second Helpers\r\n * @summary Are the given dates in the same second (and hour and day)?\r\n *\r\n * @description\r\n * Are the given dates in the same second (and hour and day)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n *\r\n * @returns The dates are in the same second (and hour and day)\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 30, 15),\r\n *   new Date(2014, 8, 4, 6, 30, 15, 500)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:00:15.000 and 4 September 2014 06:01.15.000 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 0, 15),\r\n *   new Date(2014, 8, 4, 6, 1, 15)\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:00:15.000 and 5 September 2014 06:00.15.000 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 0, 15),\r\n *   new Date(2014, 8, 5, 6, 0, 15)\r\n * )\r\n * //=> false\r\n */\nexport function isSameSecond(laterDate, earlierDate) {\n  return +startOfSecond(laterDate) === +startOfSecond(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default isSameSecond;","map":{"version":3,"names":["startOfSecond","isSameSecond","laterDate","earlierDate"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/isSameSecond.js"],"sourcesContent":["import { startOfSecond } from \"./startOfSecond.js\";\r\n\r\n/**\r\n * @name isSameSecond\r\n * @category Second Helpers\r\n * @summary Are the given dates in the same second (and hour and day)?\r\n *\r\n * @description\r\n * Are the given dates in the same second (and hour and day)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n *\r\n * @returns The dates are in the same second (and hour and day)\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 30, 15),\r\n *   new Date(2014, 8, 4, 6, 30, 15, 500)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:00:15.000 and 4 September 2014 06:01.15.000 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 0, 15),\r\n *   new Date(2014, 8, 4, 6, 1, 15)\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:00:15.000 and 5 September 2014 06:00.15.000 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 0, 15),\r\n *   new Date(2014, 8, 5, 6, 0, 15)\r\n * )\r\n * //=> false\r\n */\r\nexport function isSameSecond(laterDate, earlierDate) {\r\n  return +startOfSecond(laterDate) === +startOfSecond(earlierDate);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameSecond;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,SAAS,EAAEC,WAAW,EAAE;EACnD,OAAO,CAACH,aAAa,CAACE,SAAS,CAAC,KAAK,CAACF,aAAa,CAACG,WAAW,CAAC;AAClE;;AAEA;AACA,eAAeF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}