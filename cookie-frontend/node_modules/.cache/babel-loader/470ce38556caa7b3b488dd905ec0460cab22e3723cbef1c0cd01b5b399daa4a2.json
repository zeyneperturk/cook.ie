{"ast":null,"code":"import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { addWeeks } from \"./addWeeks.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\r\n * The {@link eachWeekOfInterval} function options.\r\n */\n\n/**\r\n * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the interval start date,\r\n * then the end interval date. If a context function is passed, it uses the context function return type.\r\n */\n\n/**\r\n * @name eachWeekOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of weeks within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of weeks within the specified time interval.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\r\n *\r\n * @example\r\n * // Each week within interval 6 October 2014 - 23 November 2014:\r\n * const result = eachWeekOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 10, 23)\r\n * })\r\n * //=> [\r\n * //   Sun Oct 05 2014 00:00:00,\r\n * //   Sun Oct 12 2014 00:00:00,\r\n * //   Sun Oct 19 2014 00:00:00,\r\n * //   Sun Oct 26 2014 00:00:00,\r\n * //   Sun Nov 02 2014 00:00:00,\r\n * //   Sun Nov 09 2014 00:00:00,\r\n * //   Sun Nov 16 2014 00:00:00,\r\n * //   Sun Nov 23 2014 00:00:00\r\n * // ]\r\n */\nexport function eachWeekOfInterval(interval, options) {\n  const {\n    start,\n    end\n  } = normalizeInterval(options?.in, interval);\n  let reversed = +start > +end;\n  const startDateWeek = reversed ? startOfWeek(end, options) : startOfWeek(start, options);\n  const endDateWeek = reversed ? startOfWeek(start, options) : startOfWeek(end, options);\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  const endTime = +endDateWeek.getTime();\n  let currentDate = startDateWeek;\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push(constructFrom(start, currentDate));\n    currentDate = addWeeks(currentDate, step);\n    currentDate.setHours(15);\n  }\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachWeekOfInterval;","map":{"version":3,"names":["normalizeInterval","addWeeks","constructFrom","startOfWeek","eachWeekOfInterval","interval","options","start","end","in","reversed","startDateWeek","endDateWeek","setHours","endTime","getTime","currentDate","step","dates","push","reverse"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/eachWeekOfInterval.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { addWeeks } from \"./addWeeks.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { startOfWeek } from \"./startOfWeek.js\";\r\n\r\n/**\r\n * The {@link eachWeekOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the interval start date,\r\n * then the end interval date. If a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name eachWeekOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of weeks within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of weeks within the specified time interval.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\r\n *\r\n * @example\r\n * // Each week within interval 6 October 2014 - 23 November 2014:\r\n * const result = eachWeekOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 10, 23)\r\n * })\r\n * //=> [\r\n * //   Sun Oct 05 2014 00:00:00,\r\n * //   Sun Oct 12 2014 00:00:00,\r\n * //   Sun Oct 19 2014 00:00:00,\r\n * //   Sun Oct 26 2014 00:00:00,\r\n * //   Sun Nov 02 2014 00:00:00,\r\n * //   Sun Nov 09 2014 00:00:00,\r\n * //   Sun Nov 16 2014 00:00:00,\r\n * //   Sun Nov 23 2014 00:00:00\r\n * // ]\r\n */\r\nexport function eachWeekOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const startDateWeek = reversed\r\n    ? startOfWeek(end, options)\r\n    : startOfWeek(start, options);\r\n  const endDateWeek = reversed\r\n    ? startOfWeek(start, options)\r\n    : startOfWeek(end, options);\r\n\r\n  startDateWeek.setHours(15);\r\n  endDateWeek.setHours(15);\r\n\r\n  const endTime = +endDateWeek.getTime();\r\n  let currentDate = startDateWeek;\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    currentDate.setHours(0);\r\n    dates.push(constructFrom(start, currentDate));\r\n    currentDate = addWeeks(currentDate, step);\r\n    currentDate.setHours(15);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekOfInterval;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACpD,MAAM;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGR,iBAAiB,CAACM,OAAO,EAAEG,EAAE,EAAEJ,QAAQ,CAAC;EAE/D,IAAIK,QAAQ,GAAG,CAACH,KAAK,GAAG,CAACC,GAAG;EAC5B,MAAMG,aAAa,GAAGD,QAAQ,GAC1BP,WAAW,CAACK,GAAG,EAAEF,OAAO,CAAC,GACzBH,WAAW,CAACI,KAAK,EAAED,OAAO,CAAC;EAC/B,MAAMM,WAAW,GAAGF,QAAQ,GACxBP,WAAW,CAACI,KAAK,EAAED,OAAO,CAAC,GAC3BH,WAAW,CAACK,GAAG,EAAEF,OAAO,CAAC;EAE7BK,aAAa,CAACE,QAAQ,CAAC,EAAE,CAAC;EAC1BD,WAAW,CAACC,QAAQ,CAAC,EAAE,CAAC;EAExB,MAAMC,OAAO,GAAG,CAACF,WAAW,CAACG,OAAO,CAAC,CAAC;EACtC,IAAIC,WAAW,GAAGL,aAAa;EAE/B,IAAIM,IAAI,GAAGX,OAAO,EAAEW,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZP,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMQ,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACF,WAAW,IAAIF,OAAO,EAAE;IAC9BE,WAAW,CAACH,QAAQ,CAAC,CAAC,CAAC;IACvBK,KAAK,CAACC,IAAI,CAACjB,aAAa,CAACK,KAAK,EAAES,WAAW,CAAC,CAAC;IAC7CA,WAAW,GAAGf,QAAQ,CAACe,WAAW,EAAEC,IAAI,CAAC;IACzCD,WAAW,CAACH,QAAQ,CAAC,EAAE,CAAC;EAC1B;EAEA,OAAOH,QAAQ,GAAGQ,KAAK,CAACE,OAAO,CAAC,CAAC,GAAGF,KAAK;AAC3C;;AAEA;AACA,eAAed,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}