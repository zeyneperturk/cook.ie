{"ast":null,"code":"import { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\n\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  const [leftStartTime, leftEndTime] = [+toDate(intervalLeft.start, options?.in), +toDate(intervalLeft.end, options?.in)].sort((a, b) => a - b);\n  const [rightStartTime, rightEndTime] = [+toDate(intervalRight.start, options?.in), +toDate(intervalRight.end, options?.in)].sort((a, b) => a - b);\n  if (options?.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}\n\n// Fallback for modularized imports:\nexport default areIntervalsOverlapping;","map":{"version":3,"names":["toDate","areIntervalsOverlapping","intervalLeft","intervalRight","options","leftStartTime","leftEndTime","start","in","end","sort","a","b","rightStartTime","rightEndTime","inclusive"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/areIntervalsOverlapping.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\r\n\r\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\r\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\r\n  const [leftStartTime, leftEndTime] = [\r\n    +toDate(intervalLeft.start, options?.in),\r\n    +toDate(intervalLeft.end, options?.in),\r\n  ].sort((a, b) => a - b);\r\n  const [rightStartTime, rightEndTime] = [\r\n    +toDate(intervalRight.start, options?.in),\r\n    +toDate(intervalRight.end, options?.in),\r\n  ].sort((a, b) => a - b);\r\n\r\n  if (options?.inclusive)\r\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\r\n\r\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default areIntervalsOverlapping;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,YAAY,EAAEC,aAAa,EAAEC,OAAO,EAAE;EAC5E,MAAM,CAACC,aAAa,EAAEC,WAAW,CAAC,GAAG,CACnC,CAACN,MAAM,CAACE,YAAY,CAACK,KAAK,EAAEH,OAAO,EAAEI,EAAE,CAAC,EACxC,CAACR,MAAM,CAACE,YAAY,CAACO,GAAG,EAAEL,OAAO,EAAEI,EAAE,CAAC,CACvC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EACvB,MAAM,CAACC,cAAc,EAAEC,YAAY,CAAC,GAAG,CACrC,CAACd,MAAM,CAACG,aAAa,CAACI,KAAK,EAAEH,OAAO,EAAEI,EAAE,CAAC,EACzC,CAACR,MAAM,CAACG,aAAa,CAACM,GAAG,EAAEL,OAAO,EAAEI,EAAE,CAAC,CACxC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAEvB,IAAIR,OAAO,EAAEW,SAAS,EACpB,OAAOV,aAAa,IAAIS,YAAY,IAAID,cAAc,IAAIP,WAAW;EAEvE,OAAOD,aAAa,GAAGS,YAAY,IAAID,cAAc,GAAGP,WAAW;AACrE;;AAEA;AACA,eAAeL,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}