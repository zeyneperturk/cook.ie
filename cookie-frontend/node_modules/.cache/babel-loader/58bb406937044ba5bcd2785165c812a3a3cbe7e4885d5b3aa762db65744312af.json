{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\n\n/**\r\n * @name transpose\r\n * @category Generic Helpers\r\n * @summary Transpose the date to the given constructor.\r\n *\r\n * @description\r\n * The function transposes the date to the given constructor. It helps you\r\n * to transpose the date in the system time zone to say `UTCDate` or any other\r\n * date extension.\r\n *\r\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\r\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\r\n *\r\n * @param date - The date to use values from\r\n * @param constructor - The date constructor to use\r\n *\r\n * @returns Date transposed to the given constructor\r\n *\r\n * @example\r\n * // Create July 10, 2022 00:00 in locale time zone\r\n * const date = new Date(2022, 6, 10)\r\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\r\n *\r\n * @example\r\n * // Transpose the date to July 10, 2022 00:00 in UTC\r\n * transpose(date, UTCDate)\r\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\r\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor) ? new constructor(0) : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n  return date_;\n}\nfunction isConstructor(constructor) {\n  return typeof constructor === \"function\" && constructor.prototype?.constructor === constructor;\n}\n\n// Fallback for modularized imports:\nexport default transpose;","map":{"version":3,"names":["constructFrom","transpose","date","constructor","date_","isConstructor","setFullYear","getFullYear","getMonth","getDate","setHours","getHours","getMinutes","getSeconds","getMilliseconds","prototype"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/transpose.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * @name transpose\r\n * @category Generic Helpers\r\n * @summary Transpose the date to the given constructor.\r\n *\r\n * @description\r\n * The function transposes the date to the given constructor. It helps you\r\n * to transpose the date in the system time zone to say `UTCDate` or any other\r\n * date extension.\r\n *\r\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\r\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\r\n *\r\n * @param date - The date to use values from\r\n * @param constructor - The date constructor to use\r\n *\r\n * @returns Date transposed to the given constructor\r\n *\r\n * @example\r\n * // Create July 10, 2022 00:00 in locale time zone\r\n * const date = new Date(2022, 6, 10)\r\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\r\n *\r\n * @example\r\n * // Transpose the date to July 10, 2022 00:00 in UTC\r\n * transpose(date, UTCDate)\r\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\r\n */\r\nexport function transpose(date, constructor) {\r\n  const date_ = isConstructor(constructor)\r\n    ? new constructor(0)\r\n    : constructFrom(constructor, 0);\r\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n  date_.setHours(\r\n    date.getHours(),\r\n    date.getMinutes(),\r\n    date.getSeconds(),\r\n    date.getMilliseconds(),\r\n  );\r\n  return date_;\r\n}\r\n\r\nfunction isConstructor(constructor) {\r\n  return (\r\n    typeof constructor === \"function\" &&\r\n    constructor.prototype?.constructor === constructor\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default transpose;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,IAAI,EAAEC,WAAW,EAAE;EAC3C,MAAMC,KAAK,GAAGC,aAAa,CAACF,WAAW,CAAC,GACpC,IAAIA,WAAW,CAAC,CAAC,CAAC,GAClBH,aAAa,CAACG,WAAW,EAAE,CAAC,CAAC;EACjCC,KAAK,CAACE,WAAW,CAACJ,IAAI,CAACK,WAAW,CAAC,CAAC,EAAEL,IAAI,CAACM,QAAQ,CAAC,CAAC,EAAEN,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC;EACtEL,KAAK,CAACM,QAAQ,CACZR,IAAI,CAACS,QAAQ,CAAC,CAAC,EACfT,IAAI,CAACU,UAAU,CAAC,CAAC,EACjBV,IAAI,CAACW,UAAU,CAAC,CAAC,EACjBX,IAAI,CAACY,eAAe,CAAC,CACvB,CAAC;EACD,OAAOV,KAAK;AACd;AAEA,SAASC,aAAaA,CAACF,WAAW,EAAE;EAClC,OACE,OAAOA,WAAW,KAAK,UAAU,IACjCA,WAAW,CAACY,SAAS,EAAEZ,WAAW,KAAKA,WAAW;AAEtD;;AAEA;AACA,eAAeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}