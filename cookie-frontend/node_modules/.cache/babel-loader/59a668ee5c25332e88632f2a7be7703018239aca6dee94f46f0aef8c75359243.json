{"ast":null,"code":"import { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link isWithinInterval} function options.\r\n */\n\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * @param date - The date to check\r\n * @param interval - The interval to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is within the interval\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * // => true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * // => false\r\n *\r\n * @example\r\n * // For date equal to the interval start:\r\n * isWithinInterval(date, { start, end: date })\r\n * // => true\r\n *\r\n * @example\r\n * // For date equal to the interval end:\r\n * isWithinInterval(date, { start: date, end })\r\n * // => true\r\n */\nexport function isWithinInterval(date, interval, options) {\n  const time = +toDate(date, options?.in);\n  const [startTime, endTime] = [+toDate(interval.start, options?.in), +toDate(interval.end, options?.in)].sort((a, b) => a - b);\n  return time >= startTime && time <= endTime;\n}\n\n// Fallback for modularized imports:\nexport default isWithinInterval;","map":{"version":3,"names":["toDate","isWithinInterval","date","interval","options","time","in","startTime","endTime","start","end","sort","a","b"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/isWithinInterval.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isWithinInterval} function options.\r\n */\r\n\r\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * @param date - The date to check\r\n * @param interval - The interval to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is within the interval\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * // => true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * // => false\r\n *\r\n * @example\r\n * // For date equal to the interval start:\r\n * isWithinInterval(date, { start, end: date })\r\n * // => true\r\n *\r\n * @example\r\n * // For date equal to the interval end:\r\n * isWithinInterval(date, { start: date, end })\r\n * // => true\r\n */\r\nexport function isWithinInterval(date, interval, options) {\r\n  const time = +toDate(date, options?.in);\r\n  const [startTime, endTime] = [\r\n    +toDate(interval.start, options?.in),\r\n    +toDate(interval.end, options?.in),\r\n  ].sort((a, b) => a - b);\r\n\r\n  return time >= startTime && time <= endTime;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isWithinInterval;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACxD,MAAMC,IAAI,GAAG,CAACL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;EACvC,MAAM,CAACC,SAAS,EAAEC,OAAO,CAAC,GAAG,CAC3B,CAACR,MAAM,CAACG,QAAQ,CAACM,KAAK,EAAEL,OAAO,EAAEE,EAAE,CAAC,EACpC,CAACN,MAAM,CAACG,QAAQ,CAACO,GAAG,EAAEN,OAAO,EAAEE,EAAE,CAAC,CACnC,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAEvB,OAAOR,IAAI,IAAIE,SAAS,IAAIF,IAAI,IAAIG,OAAO;AAC7C;;AAEA;AACA,eAAeP,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}