{"ast":null,"code":"import { millisecondsInMinute } from \"./constants.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link addMinutes} function options.\r\n */\n\n/**\r\n * @name addMinutes\r\n * @category Minute Helpers\r\n * @summary Add the specified number of minutes to the given date.\r\n *\r\n * @description\r\n * Add the specified number of minutes to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of minutes to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the minutes added\r\n *\r\n * @example\r\n * // Add 30 minutes to 10 July 2014 12:00:00:\r\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\r\n * //=> Thu Jul 10 2014 12:30:00\r\n */\nexport function addMinutes(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;","map":{"version":3,"names":["millisecondsInMinute","toDate","addMinutes","date","amount","options","_date","in","setTime","getTime"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/addMinutes.js"],"sourcesContent":["import { millisecondsInMinute } from \"./constants.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link addMinutes} function options.\r\n */\r\n\r\n/**\r\n * @name addMinutes\r\n * @category Minute Helpers\r\n * @summary Add the specified number of minutes to the given date.\r\n *\r\n * @description\r\n * Add the specified number of minutes to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of minutes to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the minutes added\r\n *\r\n * @example\r\n * // Add 30 minutes to 10 July 2014 12:00:00:\r\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\r\n * //=> Thu Jul 10 2014 12:30:00\r\n */\r\nexport function addMinutes(date, amount, options) {\r\n  const _date = toDate(date, options?.in);\r\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default addMinutes;\r\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,gBAAgB;AACrD,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAChD,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;EACvCD,KAAK,CAACE,OAAO,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGL,MAAM,GAAGJ,oBAAoB,CAAC;EAC9D,OAAOM,KAAK;AACd;;AAEA;AACA,eAAeJ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}