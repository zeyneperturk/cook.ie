{"ast":null,"code":"import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { closestIndexTo } from \"./closestIndexTo.js\";\nimport { constructFrom } from \"./constructFrom.js\";\n\n/**\r\n * The {@link closestTo} function options.\r\n */\n\n/**\r\n * The {@link closestTo} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\n\n/**\r\n * @name closestTo\r\n * @category Common Helpers\r\n * @summary Return a date from the array closest to the given date.\r\n *\r\n * @description\r\n * Return a date from the array closest to the given date.\r\n *\r\n * @typeParam DateToCompare - Date to compare argument type.\r\n * @typeParam DatesType - Dates array argument type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns The date from the array closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const result = closestTo(dateToCompare, [\r\n *   new Date(2000, 0, 1),\r\n *   new Date(2030, 0, 1)\r\n * ])\r\n * //=> Tue Jan 01 2030 00:00:00\r\n */\nexport function closestTo(dateToCompare, dates, options) {\n  const [dateToCompare_, ...dates_] = normalizeDates(options?.in, dateToCompare, ...dates);\n  const index = closestIndexTo(dateToCompare_, dates_);\n  if (typeof index === \"number\" && isNaN(index)) return constructFrom(dateToCompare_, NaN);\n  if (index !== undefined) return dates_[index];\n}\n\n// Fallback for modularized imports:\nexport default closestTo;","map":{"version":3,"names":["normalizeDates","closestIndexTo","constructFrom","closestTo","dateToCompare","dates","options","dateToCompare_","dates_","in","index","isNaN","NaN","undefined"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/closestTo.js"],"sourcesContent":["import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { closestIndexTo } from \"./closestIndexTo.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link closestTo} function options.\r\n */\r\n\r\n/**\r\n * The {@link closestTo} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name closestTo\r\n * @category Common Helpers\r\n * @summary Return a date from the array closest to the given date.\r\n *\r\n * @description\r\n * Return a date from the array closest to the given date.\r\n *\r\n * @typeParam DateToCompare - Date to compare argument type.\r\n * @typeParam DatesType - Dates array argument type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns The date from the array closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const result = closestTo(dateToCompare, [\r\n *   new Date(2000, 0, 1),\r\n *   new Date(2030, 0, 1)\r\n * ])\r\n * //=> Tue Jan 01 2030 00:00:00\r\n */\r\nexport function closestTo(dateToCompare, dates, options) {\r\n  const [dateToCompare_, ...dates_] = normalizeDates(\r\n    options?.in,\r\n    dateToCompare,\r\n    ...dates,\r\n  );\r\n\r\n  const index = closestIndexTo(dateToCompare_, dates_);\r\n\r\n  if (typeof index === \"number\" && isNaN(index))\r\n    return constructFrom(dateToCompare_, NaN);\r\n\r\n  if (index !== undefined) return dates_[index];\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default closestTo;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,aAAa,QAAQ,oBAAoB;;AAElD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,aAAa,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACvD,MAAM,CAACC,cAAc,EAAE,GAAGC,MAAM,CAAC,GAAGR,cAAc,CAChDM,OAAO,EAAEG,EAAE,EACXL,aAAa,EACb,GAAGC,KACL,CAAC;EAED,MAAMK,KAAK,GAAGT,cAAc,CAACM,cAAc,EAAEC,MAAM,CAAC;EAEpD,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAIC,KAAK,CAACD,KAAK,CAAC,EAC3C,OAAOR,aAAa,CAACK,cAAc,EAAEK,GAAG,CAAC;EAE3C,IAAIF,KAAK,KAAKG,SAAS,EAAE,OAAOL,MAAM,CAACE,KAAK,CAAC;AAC/C;;AAEA;AACA,eAAeP,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}