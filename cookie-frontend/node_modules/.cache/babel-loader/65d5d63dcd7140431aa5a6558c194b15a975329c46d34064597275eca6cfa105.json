{"ast":null,"code":"import { addYears } from \"./addYears.js\";\n\n/**\r\n * The {@link subYears} function options.\r\n */\n\n/**\r\n * @name subYears\r\n * @category Year Helpers\r\n * @summary Subtract the specified number of years from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of years from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of years to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the years subtracted\r\n *\r\n * @example\r\n * // Subtract 5 years from 1 September 2014:\r\n * const result = subYears(new Date(2014, 8, 1), 5)\r\n * //=> Tue Sep 01 2009 00:00:00\r\n */\nexport function subYears(date, amount, options) {\n  return addYears(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subYears;","map":{"version":3,"names":["addYears","subYears","date","amount","options"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/subYears.js"],"sourcesContent":["import { addYears } from \"./addYears.js\";\r\n\r\n/**\r\n * The {@link subYears} function options.\r\n */\r\n\r\n/**\r\n * @name subYears\r\n * @category Year Helpers\r\n * @summary Subtract the specified number of years from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of years from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of years to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the years subtracted\r\n *\r\n * @example\r\n * // Subtract 5 years from 1 September 2014:\r\n * const result = subYears(new Date(2014, 8, 1), 5)\r\n * //=> Tue Sep 01 2009 00:00:00\r\n */\r\nexport function subYears(date, amount, options) {\r\n  return addYears(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subYears;\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC9C,OAAOJ,QAAQ,CAACE,IAAI,EAAE,CAACC,MAAM,EAAEC,OAAO,CAAC;AACzC;;AAEA;AACA,eAAeH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}