{"ast":null,"code":"import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInDays } from \"./differenceInDays.js\";\n\n/**\r\n * The {@link differenceInWeeks} function options.\r\n */\n\n/**\r\n * @name differenceInWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of full weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of full weeks between two dates. Fractional weeks are\r\n * truncated towards zero by default.\r\n *\r\n * One \"full week\" is the distance between a local time in one day to the same\r\n * local time 7 days earlier or later. A full week can sometimes be less than\r\n * or more than 7*24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of full weeks\r\n *\r\n * @example\r\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\r\n * //=> 2\r\n *\r\n * @example\r\n * // How many full weeks are between\r\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 8 weeks (54 days),\r\n * // even if DST starts and the period has\r\n * // only 54*24-1 hours.\r\n * const result = differenceInWeeks(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 6)\r\n * )\r\n * //=> 8\r\n */\nexport function differenceInWeeks(laterDate, earlierDate, options) {\n  const diff = differenceInDays(laterDate, earlierDate, options) / 7;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInWeeks;","map":{"version":3,"names":["getRoundingMethod","differenceInDays","differenceInWeeks","laterDate","earlierDate","options","diff","roundingMethod"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/differenceInWeeks.js"],"sourcesContent":["import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { differenceInDays } from \"./differenceInDays.js\";\r\n\r\n/**\r\n * The {@link differenceInWeeks} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of full weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of full weeks between two dates. Fractional weeks are\r\n * truncated towards zero by default.\r\n *\r\n * One \"full week\" is the distance between a local time in one day to the same\r\n * local time 7 days earlier or later. A full week can sometimes be less than\r\n * or more than 7*24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of full weeks\r\n *\r\n * @example\r\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\r\n * //=> 2\r\n *\r\n * @example\r\n * // How many full weeks are between\r\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 8 weeks (54 days),\r\n * // even if DST starts and the period has\r\n * // only 54*24-1 hours.\r\n * const result = differenceInWeeks(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 6)\r\n * )\r\n * //=> 8\r\n */\r\nexport function differenceInWeeks(laterDate, earlierDate, options) {\r\n  const diff = differenceInDays(laterDate, earlierDate, options) / 7;\r\n  return getRoundingMethod(options?.roundingMethod)(diff);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInWeeks;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,gBAAgB,QAAQ,uBAAuB;;AAExD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE;EACjE,MAAMC,IAAI,GAAGL,gBAAgB,CAACE,SAAS,EAAEC,WAAW,EAAEC,OAAO,CAAC,GAAG,CAAC;EAClE,OAAOL,iBAAiB,CAACK,OAAO,EAAEE,cAAc,CAAC,CAACD,IAAI,CAAC;AACzD;;AAEA;AACA,eAAeJ,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}