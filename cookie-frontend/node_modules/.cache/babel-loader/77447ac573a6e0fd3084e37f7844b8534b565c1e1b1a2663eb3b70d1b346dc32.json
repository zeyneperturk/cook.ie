{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link setYear} function options.\r\n */\n\n/**\r\n * @name setYear\r\n * @category Year Helpers\r\n * @summary Set the year to the given date.\r\n *\r\n * @description\r\n * Set the year to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param year - The year of the new date\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date with the year set\r\n *\r\n * @example\r\n * // Set year 2013 to 1 September 2014:\r\n * const result = setYear(new Date(2014, 8, 1), 2013)\r\n * //=> Sun Sep 01 2013 00:00:00\r\n */\nexport function setYear(date, year, options) {\n  const date_ = toDate(date, options?.in);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+date_)) return constructFrom(options?.in || date, NaN);\n  date_.setFullYear(year);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default setYear;","map":{"version":3,"names":["constructFrom","toDate","setYear","date","year","options","date_","in","isNaN","NaN","setFullYear"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/setYear.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setYear} function options.\r\n */\r\n\r\n/**\r\n * @name setYear\r\n * @category Year Helpers\r\n * @summary Set the year to the given date.\r\n *\r\n * @description\r\n * Set the year to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param year - The year of the new date\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date with the year set\r\n *\r\n * @example\r\n * // Set year 2013 to 1 September 2014:\r\n * const result = setYear(new Date(2014, 8, 1), 2013)\r\n * //=> Sun Sep 01 2013 00:00:00\r\n */\r\nexport function setYear(date, year, options) {\r\n  const date_ = toDate(date, options?.in);\r\n\r\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\r\n  if (isNaN(+date_)) return constructFrom(options?.in || date, NaN);\r\n\r\n  date_.setFullYear(year);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setYear;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAC3C,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;;EAEvC;EACA,IAAIC,KAAK,CAAC,CAACF,KAAK,CAAC,EAAE,OAAON,aAAa,CAACK,OAAO,EAAEE,EAAE,IAAIJ,IAAI,EAAEM,GAAG,CAAC;EAEjEH,KAAK,CAACI,WAAW,CAACN,IAAI,CAAC;EACvB,OAAOE,KAAK;AACd;;AAEA;AACA,eAAeJ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}