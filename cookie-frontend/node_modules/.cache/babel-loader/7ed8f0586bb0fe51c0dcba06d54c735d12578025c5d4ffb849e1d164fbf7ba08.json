{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link setISOWeekYear} function options.\r\n */\n\n/**\r\n * @name setISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Set the ISO week-numbering year to the given date.\r\n *\r\n * @description\r\n * Set the ISO week-numbering year to the given date,\r\n * saving the week number and the weekday number.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param weekYear - The ISO week-numbering year of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the ISO week-numbering year set\r\n *\r\n * @example\r\n * // Set ISO week-numbering year 2007 to 29 December 2008:\r\n * const result = setISOWeekYear(new Date(2008, 11, 29), 2007)\r\n * //=> Mon Jan 01 2007 00:00:00\r\n */\nexport function setISOWeekYear(date, weekYear, options) {\n  let _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfISOWeekYear(_date, options));\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(weekYear, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  _date = startOfISOWeekYear(fourthOfJanuary);\n  _date.setDate(_date.getDate() + diff);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeekYear;","map":{"version":3,"names":["constructFrom","differenceInCalendarDays","startOfISOWeekYear","toDate","setISOWeekYear","date","weekYear","options","_date","in","diff","fourthOfJanuary","setFullYear","setHours","setDate","getDate"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/setISOWeekYear.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\r\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setISOWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name setISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Set the ISO week-numbering year to the given date.\r\n *\r\n * @description\r\n * Set the ISO week-numbering year to the given date,\r\n * saving the week number and the weekday number.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param weekYear - The ISO week-numbering year of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the ISO week-numbering year set\r\n *\r\n * @example\r\n * // Set ISO week-numbering year 2007 to 29 December 2008:\r\n * const result = setISOWeekYear(new Date(2008, 11, 29), 2007)\r\n * //=> Mon Jan 01 2007 00:00:00\r\n */\r\nexport function setISOWeekYear(date, weekYear, options) {\r\n  let _date = toDate(date, options?.in);\r\n  const diff = differenceInCalendarDays(\r\n    _date,\r\n    startOfISOWeekYear(_date, options),\r\n  );\r\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\r\n  fourthOfJanuary.setFullYear(weekYear, 0, 4);\r\n  fourthOfJanuary.setHours(0, 0, 0, 0);\r\n  _date = startOfISOWeekYear(fourthOfJanuary);\r\n  _date.setDate(_date.getDate() + diff);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setISOWeekYear;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,wBAAwB,QAAQ,+BAA+B;AACxE,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACtD,IAAIC,KAAK,GAAGL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;EACrC,MAAMC,IAAI,GAAGT,wBAAwB,CACnCO,KAAK,EACLN,kBAAkB,CAACM,KAAK,EAAED,OAAO,CACnC,CAAC;EACD,MAAMI,eAAe,GAAGX,aAAa,CAACO,OAAO,EAAEE,EAAE,IAAIJ,IAAI,EAAE,CAAC,CAAC;EAC7DM,eAAe,CAACC,WAAW,CAACN,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EAC3CK,eAAe,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpCL,KAAK,GAAGN,kBAAkB,CAACS,eAAe,CAAC;EAC3CH,KAAK,CAACM,OAAO,CAACN,KAAK,CAACO,OAAO,CAAC,CAAC,GAAGL,IAAI,CAAC;EACrC,OAAOF,KAAK;AACd;;AAEA;AACA,eAAeJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}