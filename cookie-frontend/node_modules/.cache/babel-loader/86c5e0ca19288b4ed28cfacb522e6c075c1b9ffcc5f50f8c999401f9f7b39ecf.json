{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\nimport { constructNow } from \"./constructNow.js\";\n\n/**\r\n * The {@link endOfYesterday} function options.\r\n */\n\n/**\r\n * @name endOfYesterday\r\n * @category Day Helpers\r\n * @summary Return the end of yesterday.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the end of yesterday.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @returns The end of yesterday\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = endOfYesterday()\r\n * //=> Sun Oct 5 2014 23:59:59.999\r\n */\nexport function endOfYesterday(options) {\n  const now = constructNow(options?.in);\n  const date = constructFrom(options?.in, 0);\n  date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}\n\n// Fallback for modularized imports:\nexport default endOfYesterday;","map":{"version":3,"names":["constructFrom","constructNow","endOfYesterday","options","now","in","date","setFullYear","getFullYear","getMonth","getDate","setHours"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/endOfYesterday.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\n\r\n/**\r\n * The {@link endOfYesterday} function options.\r\n */\r\n\r\n/**\r\n * @name endOfYesterday\r\n * @category Day Helpers\r\n * @summary Return the end of yesterday.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the end of yesterday.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @returns The end of yesterday\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = endOfYesterday()\r\n * //=> Sun Oct 5 2014 23:59:59.999\r\n */\r\nexport function endOfYesterday(options) {\r\n  const now = constructNow(options?.in);\r\n  const date = constructFrom(options?.in, 0);\r\n  date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate() - 1);\r\n  date.setHours(23, 59, 59, 999);\r\n  return date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfYesterday;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,OAAO,EAAE;EACtC,MAAMC,GAAG,GAAGH,YAAY,CAACE,OAAO,EAAEE,EAAE,CAAC;EACrC,MAAMC,IAAI,GAAGN,aAAa,CAACG,OAAO,EAAEE,EAAE,EAAE,CAAC,CAAC;EAC1CC,IAAI,CAACC,WAAW,CAACH,GAAG,CAACI,WAAW,CAAC,CAAC,EAAEJ,GAAG,CAACK,QAAQ,CAAC,CAAC,EAAEL,GAAG,CAACM,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EACtEJ,IAAI,CAACK,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;EAC9B,OAAOL,IAAI;AACb;;AAEA;AACA,eAAeJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}