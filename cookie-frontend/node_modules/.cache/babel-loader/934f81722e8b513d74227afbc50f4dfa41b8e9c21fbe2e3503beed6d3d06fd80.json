{"ast":null,"code":"import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { startOfQuarter } from \"./startOfQuarter.js\";\n\n/**\r\n * The {@link isSameQuarter} function options.\r\n */\n\n/**\r\n * @name isSameQuarter\r\n * @category Quarter Helpers\r\n * @summary Are the given dates in the same quarter (and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same quarter (and year)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same quarter (and year)\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\r\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same quarter?\r\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\nexport function isSameQuarter(laterDate, earlierDate, options) {\n  const [dateLeft_, dateRight_] = normalizeDates(options?.in, laterDate, earlierDate);\n  return +startOfQuarter(dateLeft_) === +startOfQuarter(dateRight_);\n}\n\n// Fallback for modularized imports:\nexport default isSameQuarter;","map":{"version":3,"names":["normalizeDates","startOfQuarter","isSameQuarter","laterDate","earlierDate","options","dateLeft_","dateRight_","in"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/isSameQuarter.js"],"sourcesContent":["import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { startOfQuarter } from \"./startOfQuarter.js\";\r\n\r\n/**\r\n * The {@link isSameQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name isSameQuarter\r\n * @category Quarter Helpers\r\n * @summary Are the given dates in the same quarter (and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same quarter (and year)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same quarter (and year)\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\r\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same quarter?\r\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\r\nexport function isSameQuarter(laterDate, earlierDate, options) {\r\n  const [dateLeft_, dateRight_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return +startOfQuarter(dateLeft_) === +startOfQuarter(dateRight_);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameQuarter;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,cAAc,QAAQ,qBAAqB;;AAEpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE;EAC7D,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGP,cAAc,CAC5CK,OAAO,EAAEG,EAAE,EACXL,SAAS,EACTC,WACF,CAAC;EACD,OAAO,CAACH,cAAc,CAACK,SAAS,CAAC,KAAK,CAACL,cAAc,CAACM,UAAU,CAAC;AACnE;;AAEA;AACA,eAAeL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}