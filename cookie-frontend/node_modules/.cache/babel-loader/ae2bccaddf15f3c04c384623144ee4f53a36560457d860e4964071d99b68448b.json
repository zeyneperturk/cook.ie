{"ast":null,"code":"import { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link setDayOfYear} function options.\r\n */\n\n/**\r\n * @name setDayOfYear\r\n * @category Day Helpers\r\n * @summary Set the day of the year to the given date.\r\n *\r\n * @description\r\n * Set the day of the year to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param dayOfYear - The day of the year of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the day of the year set\r\n *\r\n * @example\r\n * // Set the 2nd day of the year to 2 July 2014:\r\n * const result = setDayOfYear(new Date(2014, 6, 2), 2)\r\n * //=> Thu Jan 02 2014 00:00:00\r\n */\nexport function setDayOfYear(date, dayOfYear, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setMonth(0);\n  date_.setDate(dayOfYear);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default setDayOfYear;","map":{"version":3,"names":["toDate","setDayOfYear","date","dayOfYear","options","date_","in","setMonth","setDate"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/setDayOfYear.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setDayOfYear} function options.\r\n */\r\n\r\n/**\r\n * @name setDayOfYear\r\n * @category Day Helpers\r\n * @summary Set the day of the year to the given date.\r\n *\r\n * @description\r\n * Set the day of the year to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param dayOfYear - The day of the year of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the day of the year set\r\n *\r\n * @example\r\n * // Set the 2nd day of the year to 2 July 2014:\r\n * const result = setDayOfYear(new Date(2014, 6, 2), 2)\r\n * //=> Thu Jan 02 2014 00:00:00\r\n */\r\nexport function setDayOfYear(date, dayOfYear, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  date_.setMonth(0);\r\n  date_.setDate(dayOfYear);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setDayOfYear;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACrD,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;EACvCD,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC;EACjBF,KAAK,CAACG,OAAO,CAACL,SAAS,CAAC;EACxB,OAAOE,KAAK;AACd;;AAEA;AACA,eAAeJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}