{"ast":null,"code":"import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link setISODay} function options.\r\n */\n\n/**\r\n * @name setISODay\r\n * @category Weekday Helpers\r\n * @summary Set the day of the ISO week to the given date.\r\n *\r\n * @description\r\n * Set the day of the ISO week to the given date.\r\n * ISO week starts with Monday.\r\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param day - The day of the ISO week of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the day of the ISO week set\r\n *\r\n * @example\r\n * // Set Sunday to 1 September 2014:\r\n * const result = setISODay(new Date(2014, 8, 1), 7)\r\n * //=> Sun Sep 07 2014 00:00:00\r\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;","map":{"version":3,"names":["addDays","getISODay","toDate","setISODay","date","day","options","date_","in","currentDay","diff"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/setISODay.js"],"sourcesContent":["import { addDays } from \"./addDays.js\";\r\nimport { getISODay } from \"./getISODay.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setISODay} function options.\r\n */\r\n\r\n/**\r\n * @name setISODay\r\n * @category Weekday Helpers\r\n * @summary Set the day of the ISO week to the given date.\r\n *\r\n * @description\r\n * Set the day of the ISO week to the given date.\r\n * ISO week starts with Monday.\r\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param day - The day of the ISO week of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the day of the ISO week set\r\n *\r\n * @example\r\n * // Set Sunday to 1 September 2014:\r\n * const result = setISODay(new Date(2014, 8, 1), 7)\r\n * //=> Sun Sep 07 2014 00:00:00\r\n */\r\nexport function setISODay(date, day, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  const currentDay = getISODay(date_, options);\r\n  const diff = day - currentDay;\r\n  return addDays(date_, diff, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setISODay;\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAE;EAC5C,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAI,EAAEE,OAAO,EAAEE,EAAE,CAAC;EACvC,MAAMC,UAAU,GAAGR,SAAS,CAACM,KAAK,EAAED,OAAO,CAAC;EAC5C,MAAMI,IAAI,GAAGL,GAAG,GAAGI,UAAU;EAC7B,OAAOT,OAAO,CAACO,KAAK,EAAEG,IAAI,EAAEJ,OAAO,CAAC;AACtC;;AAEA;AACA,eAAeH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}