{"ast":null,"code":"import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\r\n * The {@link isSameWeek} function options.\r\n */\n\n/**\r\n * @name isSameWeek\r\n * @category Week Helpers\r\n * @summary Are the given dates in the same week (and month and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same week (and month and year)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same week (and month and year)\r\n *\r\n * @example\r\n * // Are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\r\n * //=> true\r\n *\r\n * @example\r\n * // If week starts with Monday,\r\n * // are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\r\n *   weekStartsOn: 1\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same week?\r\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\nexport function isSameWeek(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  return +startOfWeek(laterDate_, options) === +startOfWeek(earlierDate_, options);\n}\n\n// Fallback for modularized imports:\nexport default isSameWeek;","map":{"version":3,"names":["normalizeDates","startOfWeek","isSameWeek","laterDate","earlierDate","options","laterDate_","earlierDate_","in"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/isSameWeek.js"],"sourcesContent":["import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { startOfWeek } from \"./startOfWeek.js\";\r\n\r\n/**\r\n * The {@link isSameWeek} function options.\r\n */\r\n\r\n/**\r\n * @name isSameWeek\r\n * @category Week Helpers\r\n * @summary Are the given dates in the same week (and month and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same week (and month and year)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same week (and month and year)\r\n *\r\n * @example\r\n * // Are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\r\n * //=> true\r\n *\r\n * @example\r\n * // If week starts with Monday,\r\n * // are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\r\n *   weekStartsOn: 1\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same week?\r\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\r\nexport function isSameWeek(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return (\r\n    +startOfWeek(laterDate_, options) === +startOfWeek(earlierDate_, options)\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameWeek;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE;EAC1D,MAAM,CAACC,UAAU,EAAEC,YAAY,CAAC,GAAGP,cAAc,CAC/CK,OAAO,EAAEG,EAAE,EACXL,SAAS,EACTC,WACF,CAAC;EACD,OACE,CAACH,WAAW,CAACK,UAAU,EAAED,OAAO,CAAC,KAAK,CAACJ,WAAW,CAACM,YAAY,EAAEF,OAAO,CAAC;AAE7E;;AAEA;AACA,eAAeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}