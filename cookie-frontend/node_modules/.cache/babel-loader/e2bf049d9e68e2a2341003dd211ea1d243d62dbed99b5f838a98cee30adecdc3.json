{"ast":null,"code":"import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\r\n * The {@link isSameDay} function options.\r\n */\n\n/**\r\n * @name isSameDay\r\n * @category Day Helpers\r\n * @summary Are the given dates in the same day (and year and month)?\r\n *\r\n * @description\r\n * Are the given dates in the same day (and year and month)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same day (and year and month)\r\n *\r\n * @example\r\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\r\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September and 4 October in the same day?\r\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\r\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\r\n * //=> false\r\n */\nexport function isSameDay(laterDate, earlierDate, options) {\n  const [dateLeft_, dateRight_] = normalizeDates(options?.in, laterDate, earlierDate);\n  return +startOfDay(dateLeft_) === +startOfDay(dateRight_);\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;","map":{"version":3,"names":["normalizeDates","startOfDay","isSameDay","laterDate","earlierDate","options","dateLeft_","dateRight_","in"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/isSameDay.js"],"sourcesContent":["import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { startOfDay } from \"./startOfDay.js\";\r\n\r\n/**\r\n * The {@link isSameDay} function options.\r\n */\r\n\r\n/**\r\n * @name isSameDay\r\n * @category Day Helpers\r\n * @summary Are the given dates in the same day (and year and month)?\r\n *\r\n * @description\r\n * Are the given dates in the same day (and year and month)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same day (and year and month)\r\n *\r\n * @example\r\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\r\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September and 4 October in the same day?\r\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\r\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\r\n * //=> false\r\n */\r\nexport function isSameDay(laterDate, earlierDate, options) {\r\n  const [dateLeft_, dateRight_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return +startOfDay(dateLeft_) === +startOfDay(dateRight_);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameDay;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,UAAU,QAAQ,iBAAiB;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE;EACzD,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGP,cAAc,CAC5CK,OAAO,EAAEG,EAAE,EACXL,SAAS,EACTC,WACF,CAAC;EACD,OAAO,CAACH,UAAU,CAACK,SAAS,CAAC,KAAK,CAACL,UAAU,CAACM,UAAU,CAAC;AAC3D;;AAEA;AACA,eAAeL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}