{"ast":null,"code":"import { constructNow } from \"./constructNow.js\";\n\n/**\r\n * The {@link endOfTomorrow} function options.\r\n */\n\n/**\r\n * @name endOfTomorrow\r\n * @category Day Helpers\r\n * @summary Return the end of tomorrow.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the end of tomorrow.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param options - The options\r\n * @returns The end of tomorrow\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = endOfTomorrow()\r\n * //=> Tue Oct 7 2014 23:59:59.999\r\n */\nexport function endOfTomorrow(options) {\n  const now = constructNow(options?.in);\n  const year = now.getFullYear();\n  const month = now.getMonth();\n  const day = now.getDate();\n  const date = constructNow(options?.in);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return options?.in ? options.in(date) : date;\n}\n\n// Fallback for modularized imports:\nexport default endOfTomorrow;","map":{"version":3,"names":["constructNow","endOfTomorrow","options","now","in","year","getFullYear","month","getMonth","day","getDate","date","setFullYear","setHours"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/endOfTomorrow.js"],"sourcesContent":["import { constructNow } from \"./constructNow.js\";\r\n\r\n/**\r\n * The {@link endOfTomorrow} function options.\r\n */\r\n\r\n/**\r\n * @name endOfTomorrow\r\n * @category Day Helpers\r\n * @summary Return the end of tomorrow.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the end of tomorrow.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param options - The options\r\n * @returns The end of tomorrow\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = endOfTomorrow()\r\n * //=> Tue Oct 7 2014 23:59:59.999\r\n */\r\nexport function endOfTomorrow(options) {\r\n  const now = constructNow(options?.in);\r\n  const year = now.getFullYear();\r\n  const month = now.getMonth();\r\n  const day = now.getDate();\r\n\r\n  const date = constructNow(options?.in);\r\n  date.setFullYear(year, month, day + 1);\r\n  date.setHours(23, 59, 59, 999);\r\n  return options?.in ? options.in(date) : date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfTomorrow;\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,OAAO,EAAE;EACrC,MAAMC,GAAG,GAAGH,YAAY,CAACE,OAAO,EAAEE,EAAE,CAAC;EACrC,MAAMC,IAAI,GAAGF,GAAG,CAACG,WAAW,CAAC,CAAC;EAC9B,MAAMC,KAAK,GAAGJ,GAAG,CAACK,QAAQ,CAAC,CAAC;EAC5B,MAAMC,GAAG,GAAGN,GAAG,CAACO,OAAO,CAAC,CAAC;EAEzB,MAAMC,IAAI,GAAGX,YAAY,CAACE,OAAO,EAAEE,EAAE,CAAC;EACtCO,IAAI,CAACC,WAAW,CAACP,IAAI,EAAEE,KAAK,EAAEE,GAAG,GAAG,CAAC,CAAC;EACtCE,IAAI,CAACE,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;EAC9B,OAAOX,OAAO,EAAEE,EAAE,GAAGF,OAAO,CAACE,EAAE,CAACO,IAAI,CAAC,GAAGA,IAAI;AAC9C;;AAEA;AACA,eAAeV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}