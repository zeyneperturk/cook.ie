{"ast":null,"code":"import { isSameWeek } from \"./isSameWeek.js\";\n\n/**\r\n * The {@link isSameISOWeek} function options.\r\n */\n\n/**\r\n * @name isSameISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Are the given dates in the same ISO week (and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week (and year)?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same ISO week (and year)\r\n *\r\n * @example\r\n * // Are 1 September 2014 and 7 September 2014 in the same ISO week?\r\n * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 1 September 2014 and 1 September 2015 in the same ISO week?\r\n * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2015, 8, 1))\r\n * //=> false\r\n */\nexport function isSameISOWeek(laterDate, earlierDate, options) {\n  return isSameWeek(laterDate, earlierDate, {\n    ...options,\n    weekStartsOn: 1\n  });\n}\n\n// Fallback for modularized imports:\nexport default isSameISOWeek;","map":{"version":3,"names":["isSameWeek","isSameISOWeek","laterDate","earlierDate","options","weekStartsOn"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/isSameISOWeek.js"],"sourcesContent":["import { isSameWeek } from \"./isSameWeek.js\";\r\n\r\n/**\r\n * The {@link isSameISOWeek} function options.\r\n */\r\n\r\n/**\r\n * @name isSameISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Are the given dates in the same ISO week (and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week (and year)?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same ISO week (and year)\r\n *\r\n * @example\r\n * // Are 1 September 2014 and 7 September 2014 in the same ISO week?\r\n * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 1 September 2014 and 1 September 2015 in the same ISO week?\r\n * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2015, 8, 1))\r\n * //=> false\r\n */\r\nexport function isSameISOWeek(laterDate, earlierDate, options) {\r\n  return isSameWeek(laterDate, earlierDate, { ...options, weekStartsOn: 1 });\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameISOWeek;\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE;EAC7D,OAAOJ,UAAU,CAACE,SAAS,EAAEC,WAAW,EAAE;IAAE,GAAGC,OAAO;IAAEC,YAAY,EAAE;EAAE,CAAC,CAAC;AAC5E;;AAEA;AACA,eAAeJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}