{"ast":null,"code":"import { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link startOfQuarter} function options.\r\n */\n\n/**\r\n * @name startOfQuarter\r\n * @category Quarter Helpers\r\n * @summary Return the start of a year quarter for the given date.\r\n *\r\n * @description\r\n * Return the start of a year quarter for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - The options\r\n *\r\n * @returns The start of a quarter\r\n *\r\n * @example\r\n * // The start of a quarter for 2 September 2014 11:55:00:\r\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Tue Jul 01 2014 00:00:00\r\n */\nexport function startOfQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - currentMonth % 3;\n  _date.setMonth(month, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfQuarter;","map":{"version":3,"names":["toDate","startOfQuarter","date","options","_date","in","currentMonth","getMonth","month","setMonth","setHours"],"sources":["C:/Users/Zeynep/Desktop/cookie-app/cookie-frontend/node_modules/date-fns/startOfQuarter.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link startOfQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name startOfQuarter\r\n * @category Quarter Helpers\r\n * @summary Return the start of a year quarter for the given date.\r\n *\r\n * @description\r\n * Return the start of a year quarter for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - The options\r\n *\r\n * @returns The start of a quarter\r\n *\r\n * @example\r\n * // The start of a quarter for 2 September 2014 11:55:00:\r\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Tue Jul 01 2014 00:00:00\r\n */\r\nexport function startOfQuarter(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const currentMonth = _date.getMonth();\r\n  const month = currentMonth - (currentMonth % 3);\r\n  _date.setMonth(month, 1);\r\n  _date.setHours(0, 0, 0, 0);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfQuarter;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC5C,MAAMC,KAAK,GAAGJ,MAAM,CAACE,IAAI,EAAEC,OAAO,EAAEE,EAAE,CAAC;EACvC,MAAMC,YAAY,GAAGF,KAAK,CAACG,QAAQ,CAAC,CAAC;EACrC,MAAMC,KAAK,GAAGF,YAAY,GAAIA,YAAY,GAAG,CAAE;EAC/CF,KAAK,CAACK,QAAQ,CAACD,KAAK,EAAE,CAAC,CAAC;EACxBJ,KAAK,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1B,OAAON,KAAK;AACd;;AAEA;AACA,eAAeH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}